/*REXX***************************************************************** 00010000
 *                                                                      00020000
 * (C) Copyright IBM Corp. 2000 - All Rights Reserved.                  00030000
 *                                                                      00040000
 * DISCLAIMER OF WARRANTIES.  The following [enclosed] code is sample   00050000
 * code created by IBM Corporation. This sample code is not part of     00060000
 * any standard or IBM product and is provided to you solely for the    00070000
 * purpose of assisting you in the development of your applications.    00080000
 * The code is provided "AS IS", without warranty of any kind.          00090000
 * IBM shall not be liable for any damages arising out of your use of   00100000
 * the sample code,  even if they have been advised of the possibility  00110000
 * of such damages.                                                     00120000
 *                                                                      00130000
 *===================================================================== 00140000
 *                                                                      00150000
 * purpose: create and configure a new socket.                          00160000
 *                                                                      00170000
 * parms  :                                                             00180000
 *                                                                      00190000
 * return : socket handle (integer number).                             00200000
 */                                                                     00210000
                                                                        00220000
/* create a new socket for the TCP/IP protocol.                         00230000
 */                                                                     00240000
parse value Socket('Socket', 'AF_INET',,                                00250000
                             'SOCK_STREAM', 'IPPROTO_TCP'),             00260000
   with RC socket                                                       00270000
if RC \= 0 then                                                         00280000
   return RC 'newSock-Socket' socket                                    00290000
                                                                        00300000
/* 'keep-alive' ensures that the connection won't get closed            00310000
 *          even if there has been no traffic for a longer time.        00320000
 */                                                                     00330000
parse value Socket('SetSockOpt', socket, 'SOL_SOCKET',,                 00340000
                                         'SO_KEEPALIVE', 'ON'),         00350000
   with RC errTxt                                                       00360000
if RC \= 0 then                                                         00370000
   return RC 'newSock-SetSockOpt-SO_KEEPALIVE' errTxt                   00380000
                                                                        00390000
/* 'linger' mode makes sure that data that is still to be sent          00400000
 *          won't get lost when a closeSocket call occurs.              00410000
 *          -> it blocks the application at socket closing for          00420000
 *             the specified amount of seconds.                         00430000
 */                                                                     00440000
parse value Socket('SetSockOpt', socket, 'SOL_SOCKET',,                 00450000
                                         'SO_LINGER', 'ON 5'),          00460000
   with RC errTxt                                                       00470000
if RC \= 0 then                                                         00480000
   return RC 'newSock-SetSockOpt-SO_LINGER' errTxt                      00490000
                                                                        00500000
/* DISabled(OFF) 'non-blocking' mode makes I/O statements block         00510000
 *          the execution of the program until they've been             00520000
 *          satisfied, because I/O has been TCP/IP-acknowledged.        00530000
 *                                                                      00540000
 * ENabled(ON) 'non-blocking' mode makes I/O statements return          00550000
 *          promptly a RC = -1 instead of blocking execution.           00560000
 */                                                                     00570000
parse value Socket('IOCTL', socket, 'FIONBIO', 'ON'),                   00580000
   with RC errTxt                                                       00590000
if RC \= 0 then                                                         00600000
   return RC 'newSock-IOCTL' errTxt                                     00610000
                                                                        00620000
return 0 socket                                                         00630000

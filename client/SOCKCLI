/*REXX***************************************************************** 00010000
 *                                                                      00020000
 * (C) Copyright IBM Corp. 2000 - All Rights Reserved.                  00030000
 *                                                                      00040000
 * DISCLAIMER OF WARRANTIES.  The following [enclosed] code is sample   00050000
 * code created by IBM Corporation. This sample code is not part of     00060000
 * any standard or IBM product and is provided to you solely for the    00070000
 * purpose of assisting you in the development of your applications.    00080000
 * The code is provided "AS IS", without warranty of any kind.          00090000
 * IBM shall not be liable for any damages arising out of your use of   00100000
 * the sample code,  even if they have been advised of the possibility  00110000
 * of such damages.                                                     00120000
 *                                                                      00130000
 *______________________________________________________________about__ 00140000
 *                                                                      00150000
 *  purpose : TCP/IP Socket Echo-Example-Client for Host systems        00160000
 *  syntax  : exec clienth [<addr> <port>]                              00170000
 *  systems : VM, MVS(TSO/E)                                            00180000
 *  requires:                                                           00190000
 *  author  : Thorsten Schaper, IBM                                     00200000
 *  created : 04/18/2000                                                00210000
 *  last mod: 03/12/2001                                                00220000
 *_____________________________________________________code_structure__ 00230000
 *                                                                      00240000
 *  main:                                                               00250000
 *  HALT:                                                               00260000
 *  NOVALUE:                                                            00270000
 *  exit_With_Error:                                                    00280000
 *                                                                      00290000
 *  initialize_Usage_Of_Sockets_IP_Interface:                           00300000
 *  create_The_Socket_For_Communication_With_Server:                    00310000
 *                                                                      00320000
 *  connect_To_The_Given_Server:                                        00330000
 *  display_User_Menu:                                                  00340000
 */                                                                     00350000
                                                                        00360000
SIGNAL ON NOVALUE                                                       00370000
SIGNAL ON HALT                                                          00380000
                                                                        00390000
main:                                                                   00400000
   parse source src                                                     00410000
   parse arg addr port                                                  00420000
   src = 'KEY:gsp4gg4393j1g0' '15'x                                     00420114
   port = 3344                                                          00421001
   addr = '10.200.11.183'                                               00430000
   call initialize_Usage_Of_Sockets_IP_Interface                        00440000
   call connect_To_The_Given_Server                                     00450000
   call display_User_Menu                                               00470000
   exit 0                                                               00471009
                                                                        00480000
HALT:                                                                   00490000
   call Socket 'ShutDown', socket, 2   /* -> defined to linger up  */   00500000
   call Socket 'SoClose',  socket      /*    to 5 sec.             */   00510000
   call Socket 'Terminate', uid        /* terminate socket set.    */   00520000
   exit 0                                                               00530000
                                                                        00540000
NOVALUE:                                                                00550000
   if SIGL > 0 then                                                     00560000
       sl = sourceLine(SIGL)                                            00570000
   else                                                                 00580000
       sl = ''                                                          00590000
   say condition('C') 'runtime condition has been raised:'              00600000
   say '  variable name   :' condition('D')                             00610000
   say '  error line nr   :' SIGL                                       00620000
   say '  error line text :' sl                                         00630000
   return                                                               00640000
                                                                        00650000
exit_With_Error:                                                        00660000
   parse arg loc, RC, desc                                              00670000
                                                                        00680000
   sockErr = Socket('Sock_Errno')                                       00690000
   say "!!! ERROR"                                                      00700000
   say "  location of error =" loc                                      00710000
   say "  RC                =" RC                                       00720000
   say "  Description       =" desc                                     00730000
   say "  socket error nr   =" sockErr                                  00740000
   say "  error description =" Socket('PSock_Errno', sockErr)           00750000
   if datatype(RC, 'N') then                                            00760000
      exit RC                                                           00770000
   exit 1                                                               00780000
                                                                        00790000
/*===================================================================*/ 00800000
                                                                        00810000
initialize_Usage_Of_Sockets_IP_Interface:                               00820000
                                                                        00830000
   parse value initSock() with errRC errPos errDesc                     00840027
   if errRC \= 0 then                                                   00850000
      call exit_With_Error errPos, errRC, errDesc                       00860000
   else                                                                 00870000
      uid = errPos                                                      00880000
                                                                        00890000
   return                                                               00900000
                                                                        00910000
/*===================================================================*/ 00920000
                                                                        00930000
create_The_Socket_For_Communication_With_Server:                        00940000
                                                                        00950000
   parse value newSock() with errRC errPos errDesc                      00960028
   if errRC \= 0 then                                                   00970000
      call exit_With_Error errPos, errRC, errDesc                       00980000
   else                                                                 00990000
      socket = errPos                                                   01000000
                                                                        01010000
   return socket                                                        01020000
                                                                        01030000
/*===================================================================*/ 01040000
                                                                        01050000
connect_To_The_Given_Server:                                            01060000
                                                                        01070000
   socket = create_The_Socket_For_Communication_With_Server()           01080000
                                                                        01090000
   /* Build server address from command line parameters,                01100000
    * or apply defaults.                                                01110000
    */                                                                  01120000
   if addr = '' then addr = '127.0.0.1'                                 01130000
   if port = '' then port = 5000                                        01140000
   address = "AF_INET" port addr                                        01150000
                                                                        01160000
   say '...trying to connect to service at:'                            01170000
   say 'host =' addr                                                    01180000
   say 'port =' port                                                    01190000
                                                                        01200000
   /* Try to connect to server.                                         01210000
    */                                                                  01220000
   call Socket 'Connect', socket, address                               01230000
                                                                        01240000
   /* Check if connection was established.                              01250000
    */                                                                  01260000
   wList = 'WRITE' socket                                               01270000
   parse value Socket('Select', wList, 5) with RC rcText                01280000
   if RC \= 0 then                                                      01290000
      call exit_With_Error 'Connect', RC, rcText                        01300000
                                                                        01310000
   say '--> established on socket:' socket                              01320000
   say                                                                  01330000
                                                                        01340000
   /* Send string 'src' to the server.                                  01350000
    */                                                                  01360000
   parse value Socket('Send', socket, src) with RC cNr                  01370000
   if RC \= 0 then                                                      01380000
      call exit_With_Error 'Send', RC, cNr                              01390000
                                                                        01400000
   parse value rcvfSock(socket, 5) with recvSize recvText               01410030
   if recvSize <= 0 then                                                01420000
      call exit_With_Error 'Recv', -1, ''                               01430000
                                                                        01431010
   say 'recv text:' recvText                                            01432010
                                                                        01440000
   if recvText \= 'OK' then do                                          01450000
      call Socket 'Shutdown', socket, 2                                 01460000
      call Socket 'Close',    socket                                    01470000
      call exit_With_Error 'connect_To_The_Given_Server', -1,,          01480000
                           'Didn''t receive ACKnowledgement'            01490000
   end                                                                  01500000
                                                                        01510000
   return                                                               01520000
                                                                        01530000
/*===================================================================*/ 01540000
                                                                        01550000
display_User_Menu:                                                      01560000
                                                                        01570000
   text.  = ''                                                          01580000
   text.0 = 4                                                           01590000
   text.1 = "send 'TXTHello World!'    text    message"                 01600000
   text.2 = "enter text for sending a  text    message"                 01610000
   text.3 = "send 'current iodf info' text message"                     01620015
   text.4 = 'close connection & exit'                                   01630000
                                                                        01640000
   do forever                                                           01650000
                                                                        01660000
      /* Print menu and get selection from user.                        01670000
       */                                                               01680000
      do i = 1 to text.0                                                01690000
         say i".)  "text.i                                              01700000
      end                                                               01710000
      pull nr                                                           01720000
      if nr = 4 then leave                                              01730000
                                                                        01740000
      /* Build string to send to server.                                01750000
       */                                                               01760000
      select                                                            01770000
         when nr = 1 then                                               01780000
            sendStr = 'TXTHello world!' '15'x                           01790012
         when nr = 2 then do                                            01800000
            parse pull inputLine                                        01810000
            sendStr = 'TXT'inputLine '15'x                              01820012
         end                                                            01830000
         when nr = 3 then                                               01840000
            sendStr = getIodf()                                         01851024
         otherwise                                                      01860000
            sendStr = 'TXTHello confused little world!'                 01870000
      end                                                               01880000
                                                                        01890000
      /* Send string to server.                                         01900000
       */                                                               01910000
      parse value Socket('Send', socket, sendStr),                      01920000
         with RC errTxt                                                 01930000
      if RC \= 0 then                                                   01940000
         call exit_With_Error 'SockSend', RC, errTxt                    01950000
                                                                        01960000
      say copies('=', 72)                                               01970000
      say "...sent text was   : '"sendStr"'"                            01980000
                                                                        01990000
      if nr = 3 then leave                                              02000000
                                                                        02010000
      /* Wait for reply.                                                02020000
       */                                                               02030000
      parse value rcvfSock(socket, 5) with recvSize recvText            02040030
      if recvSize < 0 then                                              02050000
         call exit_With_Error 'Recv', -1, ''                            02060000
      if recvSize = 0 then                                              02070000
         say '...nothing received from socket:' socket                  02080000
      else                                                              02090000
         say "...server replied  : '"recvText"'"                        02100000
      say copies('=', 72)                                               02110000
   end                                                                  02120000
                                                                        02130000
   return                                                               02140000
                                                                        02141022
/*===================================================================*/ 02150022
                                                                        02160022
getIodf:                                                                02161022
command = 'd ios,config'                                                02162022
IF ISFCALLS('ON') <> 0 THEN EXIT 99                                     02170022
  ADDRESS SDSF "ISFEXEC '/"command"' (WAIT"                             02180022
  sw = word(ISFULOG.4,words(ISFULOG.4))                                 02190022
  hw = word(ISFULOG.7,words(ISFULOG.7))                                 02200022
CALL ISFCALLS 'OFF'                                                     02210022
return mvsvar('SYSNAME')':'sw':'hw                                      02220025
                                                                        02230026
/*===================================================================*/ 02240026
initSock:                                                               02241026
/*REXX***************************************************************** 02250026
 *                                                                      02260026
 * (C) Copyright IBM Corp. 2000 - All Rights Reserved.                  02270026
 *                                                                      02280026
 * DISCLAIMER OF WARRANTIES.  The following [enclosed] code is sample   02290026
 * code created by IBM Corporation. This sample code is not part of     02300026
 * any standard or IBM product and is provided to you solely for the    02310026
 * purpose of assisting you in the development of your applications.    02320026
 * The code is provided "AS IS", without warranty of any kind.          02330026
 * IBM shall not be liable for any damages arising out of your use of   02340026
 * the sample code,  even if they have been advised of the possibility  02350026
 * of such damages.                                                     02360026
 *                                                                      02370026
 *===================================================================== 02380026
 *                                                                      02390026
 * purpose: initialize usage of the socket API.                         02400026
 *                                                                      02410026
 * parms  : none                                                        02420026
 *                                                                      02430026
 * return : 0 = success                                                 02440026
 *          x = error                                                   02450026
 */                                                                     02460026
                                                                        02470026
parse source os .                                                       02480026
                                                                        02490026
os = translate(left(os, 3))                                             02500026
                                                                        02510026
/* get userID                                                           02520026
 */                                                                     02530026
select                                                                  02540026
   when os = 'CMS' then do                                              02550026
      ADDRESS CMS 'ID (STACK FIFO'                                      02560026
      parse pull uid .                                                  02570026
   end                                                                  02580026
   when os = 'TSO' then do                                              02590026
      uid = SYSVAR('SYSUID')                                            02600026
   end                                                                  02610026
   otherwise do                                                         02620026
      say 'sorry, but your OS is not supported.'                        02630026
      return -1 'initSock' 'Not supported operating system'             02640026
   end                                                                  02650026
end                                                                     02660026
                                                                        02670026
/* check, if there is already an active socket set.                     02680026
 * if so -> terminate it.                                               02690026
 */                                                                     02700026
parse value Socket('SocketSet'),                                        02710026
   with RC desc                                                         02720026
if RC = 0 then do                                                       02730026
   parse value Socket('Terminate', uid),                                02740026
      with RC desc                                                      02750026
   if RC \= 0 then                                                      02760026
      return RC 'initSock-Terminate' desc                               02770026
end                                                                     02780026
                                                                        02790026
/* initialize new socket set.                                           02800026
 */                                                                     02810026
maxSock = 10                                                            02820026
say 'creating SocketSet for' uid 'with max.' maxSock 'sockets.'         02830026
parse value Socket('Initialize', uid, maxSock),                         02840026
   with RC desc                                                         02850026
if RC \= 0 then                                                         02860026
   return RC 'initSock-Initialize' desc                                 02870026
                                                                        02880026
return 0 uid                                                            02890026
                                                                        02890129
/*===================================================================*/ 02891029
                                                                        02900029
newSock:                                                                02910029
/*===================================================================*/ 02911029
/*REXX***************************************************************** 02920029
 *                                                                      02930029
 * (C) Copyright IBM Corp. 2000 - All Rights Reserved.                  02940029
 *                                                                      02950029
 * DISCLAIMER OF WARRANTIES.  The following [enclosed] code is sample   02960029
 * code created by IBM Corporation. This sample code is not part of     02970029
 * any standard or IBM product and is provided to you solely for the    02980029
 * purpose of assisting you in the development of your applications.    02990029
 * The code is provided "AS IS", without warranty of any kind.          03000029
 * IBM shall not be liable for any damages arising out of your use of   03010029
 * the sample code,  even if they have been advised of the possibility  03020029
 * of such damages.                                                     03030029
 *                                                                      03040029
 *===================================================================== 03050029
 *                                                                      03060029
 * purpose: create and configure a new socket.                          03070029
 *                                                                      03080029
 * parms  :                                                             03090029
 *                                                                      03100029
 * return : socket handle (integer number).                             03110029
 */                                                                     03120029
                                                                        03130029
/* create a new socket for the TCP/IP protocol.                         03140029
 */                                                                     03150029
parse value Socket('Socket', 'AF_INET',,                                03160029
                             'SOCK_STREAM', 'IPPROTO_TCP'),             03170029
   with RC socket                                                       03180029
if RC \= 0 then                                                         03190029
   return RC 'newSock-Socket' socket                                    03200029
                                                                        03210029
/* 'keep-alive' ensures that the connection won't get closed            03220029
 *          even if there has been no traffic for a longer time.        03230029
 */                                                                     03240029
parse value Socket('SetSockOpt', socket, 'SOL_SOCKET',,                 03250029
                                         'SO_KEEPALIVE', 'ON'),         03260029
   with RC errTxt                                                       03270029
if RC \= 0 then                                                         03280029
   return RC 'newSock-SetSockOpt-SO_KEEPALIVE' errTxt                   03290029
                                                                        03300029
/* 'linger' mode makes sure that data that is still to be sent          03310029
 *          won't get lost when a closeSocket call occurs.              03320029
 *          -> it blocks the application at socket closing for          03330029
 *             the specified amount of seconds.                         03340029
 */                                                                     03350029
parse value Socket('SetSockOpt', socket, 'SOL_SOCKET',,                 03360029
                                         'SO_LINGER', 'ON 5'),          03370029
   with RC errTxt                                                       03380029
if RC \= 0 then                                                         03390029
   return RC 'newSock-SetSockOpt-SO_LINGER' errTxt                      03400029
                                                                        03410029
/* DISabled(OFF) 'non-blocking' mode makes I/O statements block         03420029
 *          the execution of the program until they've been             03430029
 *          satisfied, because I/O has been TCP/IP-acknowledged.        03440029
 *                                                                      03450029
 * ENabled(ON) 'non-blocking' mode makes I/O statements return          03460029
 *          promptly a RC = -1 instead of blocking execution.           03470029
 */                                                                     03480029
parse value Socket('IOCTL', socket, 'FIONBIO', 'ON'),                   03490029
   with RC errTxt                                                       03500029
if RC \= 0 then                                                         03510029
   return RC 'newSock-IOCTL' errTxt                                     03520029
                                                                        03530029
return 0 socket                                                         03540029
                                                                        03541030
/*********************************************************************/ 03550030
                                                                        03550130
rcvfSock:                                                               03550230
                                                                        03800030
parse arg sock, timeOut                                                 03810030
                                                                        03820030
if \dataType(timeOut, 'N') then                                         03830030
   timeOut = 0                                                          03840030
                                                                        03850030
recvText = ''                                                           03860030
recvSize = 0                                                            03870030
rList    = ''                                                           03880030
                                                                        03890030
do until strip(rList) \= '' ! timeOut = 0                               03900030
   parse value Socket('Select', 'READ' sock, 1),                        03910030
      with RC . rest                                                    03920030
   if RC = 0 then                                                       03930030
      parse var rest 'READ' rList 'WRITE'                               03940030
   timeOut = timeOut - 1                                                03950030
end                                                                     03960030
                                                                        03970030
if timeOut = 0 then                                                     03980030
   return 0                                                             03990030
                                                                        04000030
do until size < 10                                                      04010030
   parse value Socket('Recv', sock, 10),                                04020030
      with RC size text                                                 04030030
   if RC = 0 then do                                                    04040030
      if size > 0 then do                                               04050030
         recvText = recvText !! text                                    04060030
         recvSize = recvSize + size                                     04070030
      end                                                               04080030
   end                                                                  04090030
end                                                                     04100030
                                                                        04110030
return recvSize recvText                                                04120030
